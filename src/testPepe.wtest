import pepe.*

describe "Test completo" {
	test "sueldo de Pepe es 11500, y el de Ernesto es 10100." {
//	 La categoría base de _medio tiempo_ es _cadete_.
	//- Pepe tiene categoría medio tiempo (o sea, es cadete y trabaja medio tiempo), tiene bono por resultados de porcentaje, 
	//y bono por presentismo demagógico. Hacer que falte una vez.
	//- Roque tiene bono por resultados monto fijo. 
	//- Ernesto tiene como compañero a Pepe, y bono por presentismo de ajuste.
	//	Verificar que el sueldo de Pepe es 11500, el de Roque es 37800, y el de Ernesto es 10100.
		medioTiempo.categoriaBase(cadete)
		pepe.categoria(medioTiempo)
		pepe.bonoResultado(porcentual)
		pepe.bonoPresentismo(demagogico)
		pepe.faltas(1)
		assert.equals(11500, pepe.sueldo())

		roque.bonoResultado(montoFijo)
		
		ernesto.companiero(pepe)
		ernesto.bonoPresentismo(ajuste)
		
		assert.equals(37800, roque.sueldo())
		
		
		assert.equals(10100, ernesto.sueldo())
	}
}

describe "Sueldo Roqeu" {
	test "neto Roque con resultado Nulo" {
		roque.bonoResultado(resultadoNulo)
		assert.equals(37000, roque.sueldo())
	}
}

describe "Sueldo Sofia" {
	test "neto sofia siendo cadete" {
		sofia.categoria(cadete)
		assert.equals(26000, sofia.sueldo())
	}
}

describe "Neto vendedor" {
	test "neto con aumento" {
		vendedor.activarAumentoPorMuchasVentas()
		assert.equals(20000, vendedor.neto())		
	}
	
	test "neto sin aumento" {
		vendedor.desactivarAumentoPorMuchasVentas()
		assert.equals(16000, vendedor.neto())
	}
}

describe "Medio tiempo" {
	test "medio tiempo de gerente" {
		medioTiempo.categoriaBase(gerente)
		assert.equals(7500, medioTiempo.categoriaBase())
	}
	test "medio tiempo de cadete" {
		medioTiempo.categoriaBase(cadete)
		assert.equals(10000, medioTiempo.categoriaBase())
	} 
	
}

describe "Sueldo Pepe" {
	
	test "pepe cadete, monto fijo, presentismo normal" {
		//TODO: Implementame
		pepe.categoria(cadete)
		pepe.bonoResultado(montoFijo)
		pepe.bonoPresentismo(normal)
		pepe.faltas(3)
		assert.equals(20800, pepe.sueldo())
	}
	
	test "pepe gerente, porcentual, y bono de presentismo nulo." {
		pepe.categoria(gerente)
		pepe.bonoResultado(porcentual)
		pepe.bonoPresentismo(presentismoNulo)
		assert.equals(16500, pepe.sueldo())
	}
	
	test "pepe cadete, porcentual, bono por presentismo normal, nunca faltó." {
		pepe.categoria(cadete)
		pepe.bonoResultado(porcentual)
		pepe.bonoPresentismo(normal)
		assert.equals(24000, pepe.sueldo())
	}
	
	test "pepe cadete, porcentual, bono por presentismo normal, falto 1 día." {
		pepe.categoria(cadete)
		pepe.bonoResultado(porcentual)
		pepe.bonoPresentismo(normal)
		pepe.faltas(1)
		assert.equals(23000, pepe.sueldo())
	}
}

